// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AgenticTestAgenticResponse, AgenticRunAgenticQueryData, AgenticRunAgenticQueryResponse, AgentsCreateSessionData, AgentsCreateSessionResponse, AgentsGetSessionData, AgentsGetSessionResponse, AgentsPopulateIndexEndpointResponse, AgentsAgentQueryData, AgentsAgentQueryResponse, AiTravelChatWithAiPublicData, AiTravelChatWithAiPublicResponse, AiTravelPlanTripWithAiData, AiTravelPlanTripWithAiResponse, AiTravelStreamAgentEventsData, AiTravelStreamAgentEventsResponse, AiTravelChatWithAiData, AiTravelChatWithAiResponse, AiTravelScrapeImagesData, AiTravelScrapeImagesResponse, AiTravelInvalidateUserCacheResponse, AiTravelGetCacheStatsResponse, AiTravelClearAllCacheResponse, AiTravelGetConversationImagesData, AiTravelGetConversationImagesResponse, AiTravelGetAiSuggestionsData, AiTravelGetAiSuggestionsResponse, AiTravelOptimizeItineraryWithAiData, AiTravelOptimizeItineraryWithAiResponse, AiTravelSearchDestinationData, AiTravelSearchDestinationResponse, AiTravelSearchTravelOptionsData, AiTravelSearchTravelOptionsResponse, AiTravelGetTripRecommendationsData, AiTravelGetTripRecommendationsResponse, AiTravelGetDestinationWeatherData, AiTravelGetDestinationWeatherResponse, AiTravelSearchPlacesData, AiTravelSearchPlacesResponse, AiTravelSearchFlightsData, AiTravelSearchFlightsResponse, AiTravelSearchHotelsData, AiTravelSearchHotelsResponse, ConversationsReadConversationsData, ConversationsReadConversationsResponse, ConversationsCreateConversationData, ConversationsCreateConversationResponse, ConversationsReadConversationData, ConversationsReadConversationResponse, ConversationsUpdateConversationData, ConversationsUpdateConversationResponse, ConversationsDeleteConversationData, ConversationsDeleteConversationResponse, ConversationsReadConversationMessagesData, ConversationsReadConversationMessagesResponse, ConversationsCreateConversationMessageData, ConversationsCreateConversationMessageResponse, DocumentsUploadDocumentData, DocumentsUploadDocumentResponse, DocumentsGetDocumentData, DocumentsGetDocumentResponse, DocumentsDeleteDocumentData, DocumentsDeleteDocumentResponse, DocumentsDownloadDocumentData, DocumentsDownloadDocumentResponse, DocumentsGetTripDocumentsData, DocumentsGetTripDocumentsResponse, DocumentsGetBookingDocumentsData, DocumentsGetBookingDocumentsResponse, DocumentsUploadBookingDocumentData, DocumentsUploadBookingDocumentResponse, DocumentsUploadTripDocumentData, DocumentsUploadTripDocumentResponse, EvaluationEvaluateAgentData, EvaluationEvaluateAgentResponse, EvaluationSubmitFeedbackData, EvaluationSubmitFeedbackResponse, EvaluationGetFeedbackHistoryData, EvaluationGetFeedbackHistoryResponse, EvaluationGetAgentPerformanceMetricsData, EvaluationGetAgentPerformanceMetricsResponse, EvaluationGetAllAgentsPerformanceData, EvaluationGetAllAgentsPerformanceResponse, EvaluationStartAbTestData, EvaluationStartAbTestResponse, EvaluationGetAbTestResultsData, EvaluationGetAbTestResultsResponse, EvaluationGetEvaluationHistoryData, EvaluationGetEvaluationHistoryResponse, EvaluationGetEvaluationMetricsResponse, HealthBasicHealthCheckResponse, HealthDetailedHealthCheckResponse, HealthReadinessCheckResponse, HealthLivenessCheckResponse, ItemsReadItemsData, ItemsReadItemsResponse, ItemsCreateItemData, ItemsCreateItemResponse, ItemsReadItemData, ItemsReadItemResponse, ItemsUpdateItemData, ItemsUpdateItemResponse, ItemsDeleteItemData, ItemsDeleteItemResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, MapParserParseItineraryData, MapParserParseItineraryResponse, MapParserHealthCheckResponse, MonitoringGetAllAgentsPerformanceResponse, MonitoringGetAgentPerformanceData, MonitoringGetAgentPerformanceResponse, MonitoringGetErrorSummaryData, MonitoringGetErrorSummaryResponse, MonitoringGetResourceUsageResponse, MonitoringGetCostSummaryResponse, MonitoringGetUsageAnalyticsData, MonitoringGetUsageAnalyticsResponse, MonitoringGetHealthStatusResponse, MonitoringGetAllMetricsResponse, MonitoringTrackRequestData, MonitoringTrackRequestResponse, MonitoringTrackErrorData, MonitoringTrackErrorResponse, MonitoringTrackCostData, MonitoringTrackCostResponse, MonitoringGetAlertsResponse, PhotoGalleryGeneratePhotoGalleryData, PhotoGalleryGeneratePhotoGalleryResponse, PhotoGalleryGetTripGalleriesData, PhotoGalleryGetTripGalleriesResponse, PhotoGalleryGetGalleryData, PhotoGalleryGetGalleryResponse, PhotoGalleryDeleteGalleryData, PhotoGalleryDeleteGalleryResponse, PhotoGalleryGetGalleryPlacesData, PhotoGalleryGetGalleryPlacesResponse, PhotoGalleryGetPlacePhotosData, PhotoGalleryGetPlacePhotosResponse, PhotoGalleryTrackPhotoDownloadData, PhotoGalleryTrackPhotoDownloadResponse, PrivateCreateUserData, PrivateCreateUserResponse, SimpleAgenticTestSimpleAgenticResponse, SimpleAgenticRunSimpleAgenticQueryData, SimpleAgenticRunSimpleAgenticQueryResponse, TravelReadTripsData, TravelReadTripsResponse, TravelCreateTripData, TravelCreateTripResponse, TravelReadTripData, TravelReadTripResponse, TravelUpdateTripData, TravelUpdateTripResponse, TravelDeleteTripData, TravelDeleteTripResponse, TravelReadItinerariesData, TravelReadItinerariesResponse, TravelCreateItineraryData, TravelCreateItineraryResponse, TravelUpdateItineraryData, TravelUpdateItineraryResponse, TravelDeleteItineraryData, TravelDeleteItineraryResponse, TravelReadBookingsData, TravelReadBookingsResponse, TravelCreateBookingData, TravelCreateBookingResponse, TravelUpdateBookingData, TravelUpdateBookingResponse, TravelDeleteBookingData, TravelDeleteBookingResponse, TravelReadCollaboratorsData, TravelReadCollaboratorsResponse, TravelAddCollaboratorData, TravelAddCollaboratorResponse, TravelRemoveCollaboratorData, TravelRemoveCollaboratorResponse, TravelReadConversationsData, TravelReadConversationsResponse, TravelCreateConversationData, TravelCreateConversationResponse, TravelReadMessagesData, TravelReadMessagesResponse, TravelCreateMessageData, TravelCreateMessageResponse, TravelDeleteConversationData, TravelDeleteConversationResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class AgenticService {
    /**
     * Test Agentic
     * Test endpoint to verify the agentic system is working
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static testAgentic(): CancelablePromise<AgenticTestAgenticResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/agentic/test'
        });
    }
    
    /**
     * Run Agentic Query
     * @param data The data for the request.
     * @param data.userId
     * @param data.sessionId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static runAgenticQuery(data: AgenticRunAgenticQueryData): CancelablePromise<AgenticRunAgenticQueryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/agentic/run',
            query: {
                user_id: data.userId,
                session_id: data.sessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AgentsService {
    /**
     * Create Session
     * Create a new agent session.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SessionResponse Successful Response
     * @throws ApiError
     */
    public static createSession(data: AgentsCreateSessionData): CancelablePromise<AgentsCreateSessionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/api/v1/agents/sessions',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Session
     * Retrieve an agent session.
     * @param data The data for the request.
     * @param data.sessionId
     * @returns SessionResponse Successful Response
     * @throws ApiError
     */
    public static getSession(data: AgentsGetSessionData): CancelablePromise<AgentsGetSessionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/api/v1/agents/sessions/{session_id}',
            path: {
                session_id: data.sessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Populate Index Endpoint
     * Populate the mock vector store with user data.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static populateIndexEndpoint(): CancelablePromise<AgentsPopulateIndexEndpointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/api/v1/agents/index/populate'
        });
    }
    
    /**
     * Agent Query
     * Handle multi-modal travel planning query.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns QueryResponse Successful Response
     * @throws ApiError
     */
    public static agentQuery(data: AgentsAgentQueryData): CancelablePromise<AgentsAgentQueryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/api/v1/agents/query',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class AiTravelService {
    /**
     * Chat With Ai Public
     * Public chat endpoint for testing without authentication.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ChatResponse Successful Response
     * @throws ApiError
     */
    public static chatWithAiPublic(data: AiTravelChatWithAiPublicData): CancelablePromise<AiTravelChatWithAiPublicResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/chat-public',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Plan Trip With Ai
     * Plan a complete trip using AI agents.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TripPlanningResponse Successful Response
     * @throws ApiError
     */
    public static planTripWithAi(data: AiTravelPlanTripWithAiData): CancelablePromise<AiTravelPlanTripWithAiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/plan-trip',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Stream Agent Events
     * Stream agent events for a session using Server-Sent Events (SSE).
     * @param data The data for the request.
     * @param data.sessionId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static streamAgentEvents(data: AiTravelStreamAgentEventsData): CancelablePromise<AiTravelStreamAgentEventsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/agent-stream/{session_id}',
            path: {
                session_id: data.sessionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Chat With Ai
     * Enhanced chat with AI using RAG and image support.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ChatResponse Successful Response
     * @throws ApiError
     */
    public static chatWithAi(data: AiTravelChatWithAiData): CancelablePromise<AiTravelChatWithAiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/chat',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Scrape Images
     * Scrape images for a conversation
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static scrapeImages(data: AiTravelScrapeImagesData): CancelablePromise<AiTravelScrapeImagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/scrape-images',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Invalidate User Cache
     * Invalidate all cache for the current user
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static invalidateUserCache(): CancelablePromise<AiTravelInvalidateUserCacheResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/cache/invalidate'
        });
    }
    
    /**
     * Get Cache Stats
     * Get cache statistics for the current user
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getCacheStats(): CancelablePromise<AiTravelGetCacheStatsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/cache/stats'
        });
    }
    
    /**
     * Clear All Cache
     * Clear all cache (admin only)
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static clearAllCache(): CancelablePromise<AiTravelClearAllCacheResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/cache/clear'
        });
    }
    
    /**
     * Get Conversation Images
     * Get all images for a conversation
     * @param data The data for the request.
     * @param data.conversationId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getConversationImages(data: AiTravelGetConversationImagesData): CancelablePromise<AiTravelGetConversationImagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/images/{conversation_id}',
            path: {
                conversation_id: data.conversationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ai Suggestions
     * Get AI-powered suggestions for a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAiSuggestions(data: AiTravelGetAiSuggestionsData): CancelablePromise<AiTravelGetAiSuggestionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/suggestions/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Optimize Itinerary With Ai
     * Use AI to optimize an existing trip itinerary.
     * @param data The data for the request.
     * @param data.tripId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static optimizeItineraryWithAi(data: AiTravelOptimizeItineraryWithAiData): CancelablePromise<AiTravelOptimizeItineraryWithAiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/ai-travel/optimize-itinerary/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Destination
     * Search for comprehensive destination information.
     * @param data The data for the request.
     * @param data.destination
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static searchDestination(data: AiTravelSearchDestinationData): CancelablePromise<AiTravelSearchDestinationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/search-destination/{destination}',
            path: {
                destination: data.destination
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Travel Options
     * Search for flights and destination information.
     * @param data The data for the request.
     * @param data.origin
     * @param data.destination
     * @param data.departureDate
     * @param data.returnDate
     * @param data.travelers
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static searchTravelOptions(data: AiTravelSearchTravelOptionsData): CancelablePromise<AiTravelSearchTravelOptionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/search-travel-options',
            query: {
                origin: data.origin,
                destination: data.destination,
                departure_date: data.departureDate,
                return_date: data.returnDate,
                travelers: data.travelers
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Trip Recommendations
     * Get personalized trip recommendations for a destination.
     * @param data The data for the request.
     * @param data.destination
     * @param data.tripType
     * @param data.budget
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTripRecommendations(data: AiTravelGetTripRecommendationsData): CancelablePromise<AiTravelGetTripRecommendationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/recommendations/{destination}',
            path: {
                destination: data.destination
            },
            query: {
                trip_type: data.tripType,
                budget: data.budget
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Destination Weather
     * Get weather information for a destination.
     * @param data The data for the request.
     * @param data.destination
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDestinationWeather(data: AiTravelGetDestinationWeatherData): CancelablePromise<AiTravelGetDestinationWeatherResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/weather/{destination}',
            path: {
                destination: data.destination
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Places
     * Search for places (attractions, restaurants, hotels) in a destination.
     * @param data The data for the request.
     * @param data.destination
     * @param data.placeType
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static searchPlaces(data: AiTravelSearchPlacesData): CancelablePromise<AiTravelSearchPlacesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/places/{destination}',
            path: {
                destination: data.destination
            },
            query: {
                place_type: data.placeType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Flights
     * Search for flights between two destinations.
     * @param data The data for the request.
     * @param data.origin
     * @param data.destination
     * @param data.departureDate
     * @param data.returnDate
     * @param data.adults
     * @param data.children
     * @param data.infants
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static searchFlights(data: AiTravelSearchFlightsData): CancelablePromise<AiTravelSearchFlightsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/flights',
            query: {
                origin: data.origin,
                destination: data.destination,
                departure_date: data.departureDate,
                return_date: data.returnDate,
                adults: data.adults,
                children: data.children,
                infants: data.infants
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Search Hotels
     * Search for hotels in a city.
     * @param data The data for the request.
     * @param data.cityCode
     * @param data.checkIn
     * @param data.checkOut
     * @param data.adults
     * @param data.rooms
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static searchHotels(data: AiTravelSearchHotelsData): CancelablePromise<AiTravelSearchHotelsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/ai-travel/hotels/{city_code}',
            path: {
                city_code: data.cityCode
            },
            query: {
                check_in: data.checkIn,
                check_out: data.checkOut,
                adults: data.adults,
                rooms: data.rooms
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ConversationsService {
    /**
     * Read Conversations
     * Retrieve user's conversations with enhanced filtering.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.search Search in conversation titles and content
     * @param data.isArchived Filter by archived status
     * @param data.isFavorite Filter by favorite status
     * @returns ConversationsPublic Successful Response
     * @throws ApiError
     */
    public static readConversations(data: ConversationsReadConversationsData = {}): CancelablePromise<ConversationsReadConversationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/conversations',
            query: {
                skip: data.skip,
                limit: data.limit,
                search: data.search,
                is_archived: data.isArchived,
                is_favorite: data.isFavorite
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Conversation
     * Create a new conversation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConversationPublic Successful Response
     * @throws ApiError
     */
    public static createConversation(data: ConversationsCreateConversationData): CancelablePromise<ConversationsCreateConversationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/conversations',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Conversation
     * Retrieve a specific conversation.
     * @param data The data for the request.
     * @param data.conversationId
     * @returns ConversationPublic Successful Response
     * @throws ApiError
     */
    public static readConversation(data: ConversationsReadConversationData): CancelablePromise<ConversationsReadConversationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/conversations/{conversation_id}',
            path: {
                conversation_id: data.conversationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Conversation
     * Update a conversation.
     * @param data The data for the request.
     * @param data.conversationId
     * @param data.requestBody
     * @returns ConversationPublic Successful Response
     * @throws ApiError
     */
    public static updateConversation(data: ConversationsUpdateConversationData): CancelablePromise<ConversationsUpdateConversationResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/conversations/{conversation_id}',
            path: {
                conversation_id: data.conversationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Conversation
     * Delete a conversation and all its messages.
     * @param data The data for the request.
     * @param data.conversationId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteConversation(data: ConversationsDeleteConversationData): CancelablePromise<ConversationsDeleteConversationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/conversations/{conversation_id}',
            path: {
                conversation_id: data.conversationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Conversation Messages
     * Retrieve messages for a conversation.
     * @param data The data for the request.
     * @param data.conversationId
     * @param data.skip
     * @param data.limit
     * @returns ConversationMessagesPublic Successful Response
     * @throws ApiError
     */
    public static readConversationMessages(data: ConversationsReadConversationMessagesData): CancelablePromise<ConversationsReadConversationMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/conversations/{conversation_id}/messages',
            path: {
                conversation_id: data.conversationId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Conversation Message
     * Create a new message in a conversation with RAG image support.
     * @param data The data for the request.
     * @param data.conversationId
     * @param data.requestBody
     * @returns ConversationMessagePublic Successful Response
     * @throws ApiError
     */
    public static createConversationMessage(data: ConversationsCreateConversationMessageData): CancelablePromise<ConversationsCreateConversationMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/conversations/{conversation_id}/messages',
            path: {
                conversation_id: data.conversationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DocumentsService {
    /**
     * Upload Document
     * Upload a document for a trip or booking.
     * @param data The data for the request.
     * @param data.formData
     * @param data.tripId
     * @param data.bookingId
     * @param data.documentType
     * @returns DocumentUploadResponse Successful Response
     * @throws ApiError
     */
    public static uploadDocument(data: DocumentsUploadDocumentData): CancelablePromise<DocumentsUploadDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/upload',
            query: {
                trip_id: data.tripId,
                booking_id: data.bookingId,
                document_type: data.documentType
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Document
     * Get document information.
     * @param data The data for the request.
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getDocument(data: DocumentsGetDocumentData): CancelablePromise<DocumentsGetDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/{document_id}',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Document
     * Delete a document.
     * @param data The data for the request.
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteDocument(data: DocumentsDeleteDocumentData): CancelablePromise<DocumentsDeleteDocumentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/documents/{document_id}',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download Document
     * Download document file.
     * @param data The data for the request.
     * @param data.documentId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static downloadDocument(data: DocumentsDownloadDocumentData): CancelablePromise<DocumentsDownloadDocumentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/{document_id}/download',
            path: {
                document_id: data.documentId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Trip Documents
     * Get all documents for a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.documentType Filter by document type
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getTripDocuments(data: DocumentsGetTripDocumentsData): CancelablePromise<DocumentsGetTripDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/trip/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            query: {
                document_type: data.documentType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Booking Documents
     * Get all documents for a booking.
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.documentType Filter by document type
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getBookingDocuments(data: DocumentsGetBookingDocumentsData): CancelablePromise<DocumentsGetBookingDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/documents/booking/{booking_id}',
            path: {
                booking_id: data.bookingId
            },
            query: {
                document_type: data.documentType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Booking Document
     * Upload a document for a specific booking.
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.formData
     * @param data.documentType
     * @returns DocumentUploadResponse Successful Response
     * @throws ApiError
     */
    public static uploadBookingDocument(data: DocumentsUploadBookingDocumentData): CancelablePromise<DocumentsUploadBookingDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/booking/{booking_id}/upload',
            path: {
                booking_id: data.bookingId
            },
            query: {
                document_type: data.documentType
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload Trip Document
     * Upload a document for a specific trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.formData
     * @param data.documentType
     * @returns DocumentUploadResponse Successful Response
     * @throws ApiError
     */
    public static uploadTripDocument(data: DocumentsUploadTripDocumentData): CancelablePromise<DocumentsUploadTripDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/documents/trip/{trip_id}/upload',
            path: {
                trip_id: data.tripId
            },
            query: {
                document_type: data.documentType
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class EvaluationService {
    /**
     * Evaluate Agent
     * Evaluate an agent response using specified evaluation type
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EvaluationResponse Successful Response
     * @throws ApiError
     */
    public static evaluateAgent(data: EvaluationEvaluateAgentData): CancelablePromise<EvaluationEvaluateAgentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/evaluation/evaluate',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Submit Feedback
     * Submit human feedback for agent evaluation
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Successful Response
     * @throws ApiError
     */
    public static submitFeedback(data: EvaluationSubmitFeedbackData): CancelablePromise<EvaluationSubmitFeedbackResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/evaluation/feedback',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Feedback History
     * Get human feedback history
     * @param data The data for the request.
     * @param data.agentName
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getFeedbackHistory(data: EvaluationGetFeedbackHistoryData = {}): CancelablePromise<EvaluationGetFeedbackHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluation/feedback',
            query: {
                agent_name: data.agentName,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Agent Performance Metrics
     * Get performance metrics for a specific agent
     * @param data The data for the request.
     * @param data.agentName
     * @param data.days
     * @returns PerformanceSummaryResponse Successful Response
     * @throws ApiError
     */
    public static getAgentPerformanceMetrics(data: EvaluationGetAgentPerformanceMetricsData): CancelablePromise<EvaluationGetAgentPerformanceMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluation/performance/{agent_name}',
            path: {
                agent_name: data.agentName
            },
            query: {
                days: data.days
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get All Agents Performance
     * Get performance metrics for all agents
     * @param data The data for the request.
     * @param data.days
     * @returns PerformanceSummaryResponse Successful Response
     * @throws ApiError
     */
    public static getAllAgentsPerformance(data: EvaluationGetAllAgentsPerformanceData = {}): CancelablePromise<EvaluationGetAllAgentsPerformanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluation/performance',
            query: {
                days: data.days
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Start Ab Test
     * Start an A/B test between two agents
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static startAbTest(data: EvaluationStartAbTestData): CancelablePromise<EvaluationStartAbTestResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/evaluation/ab-test',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Ab Test Results
     * Get results of an A/B test
     * @param data The data for the request.
     * @param data.testId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAbTestResults(data: EvaluationGetAbTestResultsData): CancelablePromise<EvaluationGetAbTestResultsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluation/ab-test/{test_id}',
            path: {
                test_id: data.testId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Evaluation History
     * Get evaluation history for agents
     * @param data The data for the request.
     * @param data.agentName
     * @param data.limit
     * @returns EvaluationResponse Successful Response
     * @throws ApiError
     */
    public static getEvaluationHistory(data: EvaluationGetEvaluationHistoryData = {}): CancelablePromise<EvaluationGetEvaluationHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluation/evaluations',
            query: {
                agent_name: data.agentName,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Evaluation Metrics
     * Get overall evaluation metrics and statistics
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getEvaluationMetrics(): CancelablePromise<EvaluationGetEvaluationMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/evaluation/metrics'
        });
    }
    
}

export class HealthService {
    /**
     * Basic Health Check
     * Basic health check endpoint.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static basicHealthCheck(): CancelablePromise<HealthBasicHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/health/'
        });
    }
    
    /**
     * Detailed Health Check
     * Detailed health check with all dependencies.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static detailedHealthCheck(): CancelablePromise<HealthDetailedHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/health/detailed'
        });
    }
    
    /**
     * Readiness Check
     * Kubernetes readiness probe endpoint.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readinessCheck(): CancelablePromise<HealthReadinessCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/health/ready'
        });
    }
    
    /**
     * Liveness Check
     * Kubernetes liveness probe endpoint.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static livenessCheck(): CancelablePromise<HealthLivenessCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/health/live'
        });
    }
    
}

export class ItemsService {
    /**
     * Read Items
     * Retrieve items.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ItemsPublic Successful Response
     * @throws ApiError
     */
    public static readItems(data: ItemsReadItemsData = {}): CancelablePromise<ItemsReadItemsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * Create new item.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static createItem(data: ItemsCreateItemData): CancelablePromise<ItemsCreateItemResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/items/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Item
     * Get item by ID.
     * @param data The data for the request.
     * @param data.id
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static readItem(data: ItemsReadItemData): CancelablePromise<ItemsReadItemResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * Update an item.
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns ItemPublic Successful Response
     * @throws ApiError
     */
    public static updateItem(data: ItemsUpdateItemData): CancelablePromise<ItemsUpdateItemResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item.
     * @param data The data for the request.
     * @param data.id
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItem(data: ItemsDeleteItemData): CancelablePromise<ItemsDeleteItemResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/items/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class MapParserService {
    /**
     * Parse Itinerary
     * Parse a travel itinerary and convert it to geo-enriched map data.
     *
     * Args:
     * request: Request containing itinerary_data and chat_id
     * current_user: Current authenticated user
     * db: Database session
     *
     * Returns:
     * Structured map data ready for frontend visualization
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static parseItinerary(data: MapParserParseItineraryData): CancelablePromise<MapParserParseItineraryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/map-parser/parse-itinerary',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * Health check endpoint for map parser service.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<MapParserHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/map-parser/health'
        });
    }
    
}

export class MonitoringService {
    /**
     * Get All Agents Performance
     * Get performance metrics for all agents
     * @returns PerformanceResponse Successful Response
     * @throws ApiError
     */
    public static getAllAgentsPerformance(): CancelablePromise<MonitoringGetAllAgentsPerformanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/performance'
        });
    }
    
    /**
     * Get Agent Performance
     * Get performance metrics for a specific agent
     * @param data The data for the request.
     * @param data.agentName
     * @returns PerformanceResponse Successful Response
     * @throws ApiError
     */
    public static getAgentPerformance(data: MonitoringGetAgentPerformanceData): CancelablePromise<MonitoringGetAgentPerformanceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/performance/{agent_name}',
            path: {
                agent_name: data.agentName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Error Summary
     * Get error summary for the specified time period
     * @param data The data for the request.
     * @param data.hours Hours to look back for errors
     * @returns ErrorSummaryResponse Successful Response
     * @throws ApiError
     */
    public static getErrorSummary(data: MonitoringGetErrorSummaryData = {}): CancelablePromise<MonitoringGetErrorSummaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/errors',
            query: {
                hours: data.hours
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Resource Usage
     * Get current system resource usage
     * @returns ResourceUsageResponse Successful Response
     * @throws ApiError
     */
    public static getResourceUsage(): CancelablePromise<MonitoringGetResourceUsageResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/resources'
        });
    }
    
    /**
     * Get Cost Summary
     * Get cost summary for all agents
     * @returns CostSummaryResponse Successful Response
     * @throws ApiError
     */
    public static getCostSummary(): CancelablePromise<MonitoringGetCostSummaryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/costs'
        });
    }
    
    /**
     * Get Usage Analytics
     * Get usage analytics for the specified time period
     * @param data The data for the request.
     * @param data.hours Hours to look back for analytics
     * @returns UsageAnalyticsResponse Successful Response
     * @throws ApiError
     */
    public static getUsageAnalytics(data: MonitoringGetUsageAnalyticsData = {}): CancelablePromise<MonitoringGetUsageAnalyticsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/analytics',
            query: {
                hours: data.hours
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Health Status
     * Get overall health status of the agent system
     * @returns HealthStatusResponse Successful Response
     * @throws ApiError
     */
    public static getHealthStatus(): CancelablePromise<MonitoringGetHealthStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/health'
        });
    }
    
    /**
     * Get All Metrics
     * Get comprehensive metrics dashboard data
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAllMetrics(): CancelablePromise<MonitoringGetAllMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/metrics'
        });
    }
    
    /**
     * Track Request
     * Track a request to an agent (for testing/monitoring)
     * @param data The data for the request.
     * @param data.agentName
     * @param data.responseTime
     * @param data.success
     * @returns string Successful Response
     * @throws ApiError
     */
    public static trackRequest(data: MonitoringTrackRequestData): CancelablePromise<MonitoringTrackRequestResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/monitoring/track/request',
            query: {
                agent_name: data.agentName,
                response_time: data.responseTime,
                success: data.success
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Track Error
     * Track an error event (for testing/monitoring)
     * @param data The data for the request.
     * @param data.agentName
     * @param data.errorType
     * @param data.errorMessage
     * @param data.stackTrace
     * @param data.requestId
     * @returns string Successful Response
     * @throws ApiError
     */
    public static trackError(data: MonitoringTrackErrorData): CancelablePromise<MonitoringTrackErrorResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/monitoring/track/error',
            query: {
                agent_name: data.agentName,
                error_type: data.errorType,
                error_message: data.errorMessage,
                stack_trace: data.stackTrace,
                request_id: data.requestId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Track Cost
     * Track cost for agent operations (for testing/monitoring)
     * @param data The data for the request.
     * @param data.agentName
     * @param data.cost
     * @param data.operation
     * @returns string Successful Response
     * @throws ApiError
     */
    public static trackCost(data: MonitoringTrackCostData): CancelablePromise<MonitoringTrackCostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/monitoring/track/cost',
            query: {
                agent_name: data.agentName,
                cost: data.cost,
                operation: data.operation
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Alerts
     * Get current alerts and warnings
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getAlerts(): CancelablePromise<MonitoringGetAlertsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/monitoring/alerts'
        });
    }
    
}

export class PhotoGalleryService {
    /**
     * Generate Photo Gallery
     * Generate a photo gallery for a trip's itinerary
     * @param data The data for the request.
     * @param data.tripId
     * @returns PhotoGalleryPublic Successful Response
     * @throws ApiError
     */
    public static generatePhotoGallery(data: PhotoGalleryGeneratePhotoGalleryData): CancelablePromise<PhotoGalleryGeneratePhotoGalleryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/photo-gallery/generate/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Trip Galleries
     * Get all photo galleries for a trip
     * @param data The data for the request.
     * @param data.tripId
     * @returns PhotoGalleriesPublic Successful Response
     * @throws ApiError
     */
    public static getTripGalleries(data: PhotoGalleryGetTripGalleriesData): CancelablePromise<PhotoGalleryGetTripGalleriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photo-gallery/trip/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Gallery
     * Get a specific photo gallery
     * @param data The data for the request.
     * @param data.galleryId
     * @returns PhotoGalleryPublic Successful Response
     * @throws ApiError
     */
    public static getGallery(data: PhotoGalleryGetGalleryData): CancelablePromise<PhotoGalleryGetGalleryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photo-gallery/{gallery_id}',
            path: {
                gallery_id: data.galleryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Gallery
     * Delete a photo gallery
     * @param data The data for the request.
     * @param data.galleryId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteGallery(data: PhotoGalleryDeleteGalleryData): CancelablePromise<PhotoGalleryDeleteGalleryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/photo-gallery/{gallery_id}',
            path: {
                gallery_id: data.galleryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Gallery Places
     * Get all places in a gallery
     * @param data The data for the request.
     * @param data.galleryId
     * @returns GalleryPlacesPublic Successful Response
     * @throws ApiError
     */
    public static getGalleryPlaces(data: PhotoGalleryGetGalleryPlacesData): CancelablePromise<PhotoGalleryGetGalleryPlacesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photo-gallery/{gallery_id}/places',
            path: {
                gallery_id: data.galleryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Place Photos
     * Get all photos for a specific place
     * @param data The data for the request.
     * @param data.galleryId
     * @param data.placeId
     * @returns GalleryPhotosPublic Successful Response
     * @throws ApiError
     */
    public static getPlacePhotos(data: PhotoGalleryGetPlacePhotosData): CancelablePromise<PhotoGalleryGetPlacePhotosResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/photo-gallery/{gallery_id}/places/{place_id}/photos',
            path: {
                gallery_id: data.galleryId,
                place_id: data.placeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Track Photo Download
     * Track photo download for Unsplash compliance
     * @param data The data for the request.
     * @param data.galleryId
     * @param data.photoId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static trackPhotoDownload(data: PhotoGalleryTrackPhotoDownloadData): CancelablePromise<PhotoGalleryTrackPhotoDownloadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/photo-gallery/{gallery_id}/photos/{photo_id}/track-download',
            path: {
                gallery_id: data.galleryId,
                photo_id: data.photoId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SimpleAgenticService {
    /**
     * Test Simple Agentic
     * Test endpoint to verify the simple agentic system is working
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static testSimpleAgentic(): CancelablePromise<SimpleAgenticTestSimpleAgenticResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/simple-agentic/test'
        });
    }
    
    /**
     * Run Simple Agentic Query
     * @param data The data for the request.
     * @param data.userId
     * @param data.sessionId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static runSimpleAgenticQuery(data: SimpleAgenticRunSimpleAgenticQueryData): CancelablePromise<SimpleAgenticRunSimpleAgenticQueryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/simple-agentic/run',
            query: {
                user_id: data.userId,
                session_id: data.sessionId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class TravelService {
    /**
     * Read Trips
     * Retrieve user's trips with optional filtering.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @param data.status
     * @param data.tripType
     * @returns TripsPublic Successful Response
     * @throws ApiError
     */
    public static readTrips(data: TravelReadTripsData = {}): CancelablePromise<TravelReadTripsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/trips',
            query: {
                skip: data.skip,
                limit: data.limit,
                status: data.status,
                trip_type: data.tripType
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Trip
     * Create a new trip.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TripPublic Successful Response
     * @throws ApiError
     */
    public static createTrip(data: TravelCreateTripData): CancelablePromise<TravelCreateTripResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/travel/trips',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Trip
     * Retrieve a specific trip.
     * @param data The data for the request.
     * @param data.tripId
     * @returns TripPublic Successful Response
     * @throws ApiError
     */
    public static readTrip(data: TravelReadTripData): CancelablePromise<TravelReadTripResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/trips/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Trip
     * Update a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.requestBody
     * @returns TripPublic Successful Response
     * @throws ApiError
     */
    public static updateTrip(data: TravelUpdateTripData): CancelablePromise<TravelUpdateTripResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/travel/trips/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Trip
     * Delete a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteTrip(data: TravelDeleteTripData): CancelablePromise<TravelDeleteTripResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/travel/trips/{trip_id}',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Itineraries
     * Retrieve itineraries for a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.skip
     * @param data.limit
     * @returns ItinerariesPublic Successful Response
     * @throws ApiError
     */
    public static readItineraries(data: TravelReadItinerariesData): CancelablePromise<TravelReadItinerariesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/trips/{trip_id}/itineraries',
            path: {
                trip_id: data.tripId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Itinerary
     * Create a new itinerary item.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.requestBody
     * @returns ItineraryPublic Successful Response
     * @throws ApiError
     */
    public static createItinerary(data: TravelCreateItineraryData): CancelablePromise<TravelCreateItineraryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/travel/trips/{trip_id}/itineraries',
            path: {
                trip_id: data.tripId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Itinerary
     * Update an itinerary item.
     * @param data The data for the request.
     * @param data.itineraryId
     * @param data.requestBody
     * @returns ItineraryPublic Successful Response
     * @throws ApiError
     */
    public static updateItinerary(data: TravelUpdateItineraryData): CancelablePromise<TravelUpdateItineraryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/travel/itineraries/{itinerary_id}',
            path: {
                itinerary_id: data.itineraryId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Itinerary
     * Delete an itinerary item.
     * @param data The data for the request.
     * @param data.itineraryId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteItinerary(data: TravelDeleteItineraryData): CancelablePromise<TravelDeleteItineraryResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/travel/itineraries/{itinerary_id}',
            path: {
                itinerary_id: data.itineraryId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Bookings
     * Retrieve bookings for a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.skip
     * @param data.limit
     * @returns BookingsPublic Successful Response
     * @throws ApiError
     */
    public static readBookings(data: TravelReadBookingsData): CancelablePromise<TravelReadBookingsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/trips/{trip_id}/bookings',
            path: {
                trip_id: data.tripId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Booking
     * Create a new booking.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.requestBody
     * @returns BookingPublic Successful Response
     * @throws ApiError
     */
    public static createBooking(data: TravelCreateBookingData): CancelablePromise<TravelCreateBookingResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/travel/trips/{trip_id}/bookings',
            path: {
                trip_id: data.tripId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Booking
     * Update a booking.
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.requestBody
     * @returns BookingPublic Successful Response
     * @throws ApiError
     */
    public static updateBooking(data: TravelUpdateBookingData): CancelablePromise<TravelUpdateBookingResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/travel/bookings/{booking_id}',
            path: {
                booking_id: data.bookingId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Booking
     * Delete a booking.
     * @param data The data for the request.
     * @param data.bookingId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteBooking(data: TravelDeleteBookingData): CancelablePromise<TravelDeleteBookingResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/travel/bookings/{booking_id}',
            path: {
                booking_id: data.bookingId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Collaborators
     * Retrieve collaborators for a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readCollaborators(data: TravelReadCollaboratorsData): CancelablePromise<TravelReadCollaboratorsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/trips/{trip_id}/collaborators',
            path: {
                trip_id: data.tripId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Add Collaborator
     * Add a collaborator to a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static addCollaborator(data: TravelAddCollaboratorData): CancelablePromise<TravelAddCollaboratorResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/travel/trips/{trip_id}/collaborators',
            path: {
                trip_id: data.tripId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Remove Collaborator
     * Remove a collaborator from a trip.
     * @param data The data for the request.
     * @param data.tripId
     * @param data.collaboratorId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static removeCollaborator(data: TravelRemoveCollaboratorData): CancelablePromise<TravelRemoveCollaboratorResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/travel/trips/{trip_id}/collaborators/{collaborator_id}',
            path: {
                trip_id: data.tripId,
                collaborator_id: data.collaboratorId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Conversations
     * Retrieve user's conversations.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readConversations(data: TravelReadConversationsData = {}): CancelablePromise<TravelReadConversationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/conversations',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Conversation
     * Create a new conversation.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ConversationPublic Successful Response
     * @throws ApiError
     */
    public static createConversation(data: TravelCreateConversationData): CancelablePromise<TravelCreateConversationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/travel/conversations',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Messages
     * Retrieve messages for a conversation.
     * @param data The data for the request.
     * @param data.conversationId
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readMessages(data: TravelReadMessagesData): CancelablePromise<TravelReadMessagesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/travel/conversations/{conversation_id}/messages',
            path: {
                conversation_id: data.conversationId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Message
     * Create a new message in a conversation.
     * @param data The data for the request.
     * @param data.conversationId
     * @param data.requestBody
     * @returns ConversationMessagePublic Successful Response
     * @throws ApiError
     */
    public static createMessage(data: TravelCreateMessageData): CancelablePromise<TravelCreateMessageResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/travel/conversations/{conversation_id}/messages',
            path: {
                conversation_id: data.conversationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Conversation
     * Delete a conversation and all its messages.
     * @param data The data for the request.
     * @param data.conversationId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteConversation(data: TravelDeleteConversationData): CancelablePromise<TravelDeleteConversationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/travel/conversations/{conversation_id}',
            path: {
                conversation_id: data.conversationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}