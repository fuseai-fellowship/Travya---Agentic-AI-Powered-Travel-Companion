// This file is auto-generated by @hey-api/openapi-ts

export type ABTestRequest = {
    /**
     * Query to test
     */
    query: string;
    /**
     * First agent to test
     */
    agent_a: string;
    /**
     * Second agent to test
     */
    agent_b: string;
    /**
     * Test duration in hours
     */
    test_duration_hours?: number;
};

export type Body_documents_upload_booking_document = {
    file: (Blob | File);
};

export type Body_documents_upload_document = {
    file: (Blob | File);
    tags?: (Array<(string)> | null);
};

export type Body_documents_upload_trip_document = {
    file: (Blob | File);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type BookingCreate = {
    title: string;
    booking_type: string;
    provider: string;
    confirmation_number?: (string | null);
    booking_date?: (string | null);
    check_in_date?: (string | null);
    check_out_date?: (string | null);
    amount?: (number | null);
    currency?: string;
    status?: BookingStatus;
    notes?: (string | null);
    document_urls?: (string | null);
    trip_id: string;
    itinerary_id?: (string | null);
};

export type BookingPublic = {
    title: string;
    booking_type: string;
    provider: string;
    confirmation_number?: (string | null);
    booking_date?: (string | null);
    check_in_date?: (string | null);
    check_out_date?: (string | null);
    amount?: (number | null);
    currency?: string;
    status?: BookingStatus;
    notes?: (string | null);
    document_urls?: (string | null);
    id: string;
    trip_id: string;
    itinerary_id: (string | null);
    created_at: string;
    updated_at: string;
};

export type BookingsPublic = {
    data: Array<BookingPublic>;
    count: number;
};

export type BookingStatus = 'pending' | 'confirmed' | 'cancelled' | 'completed';

export type BookingUpdate = {
    title?: (string | null);
    booking_type?: (string | null);
    provider?: (string | null);
    confirmation_number?: (string | null);
    booking_date?: (string | null);
    check_in_date?: (string | null);
    check_out_date?: (string | null);
    amount?: (number | null);
    currency?: (string | null);
    status?: (BookingStatus | null);
    notes?: (string | null);
    document_urls?: (string | null);
};

export type ChatRequest = {
    message: string;
    conversation_id?: (string | null);
    trip_id?: (string | null);
};

export type ChatResponse = {
    response: string;
    conversation_id: string;
    suggestions?: (Array<{
    [key: string]: unknown;
}> | null);
};

export type ConversationCreate = {
    title?: (string | null);
    trip_id?: (string | null);
};

export type ConversationMessageCreate = {
    content: string;
    sender: string;
    conversation_id: string;
};

export type ConversationMessagePublic = {
    content: string;
    sender: string;
    id: string;
    conversation_id: string;
    created_at: string;
};

export type ConversationMessagesPublic = {
    data: Array<ConversationMessagePublic>;
    count: number;
};

export type ConversationPublic = {
    title?: (string | null);
    trip_id?: (string | null);
    id: string;
    user_id: string;
    last_message: (string | null);
    created_at: string;
    updated_at: string;
};

export type ConversationsPublic = {
    data: Array<ConversationPublic>;
    count: number;
};

export type ConversationUpdate = {
    title?: (string | null);
    trip_id?: (string | null);
};

export type CostSummaryResponse = {
    total_cost: number;
    cost_by_agent: {
        [key: string]: (number);
    };
    cost_breakdown: {
        [key: string]: (number);
    };
};

export type DocumentUploadResponse = {
    document_id: string;
    filename: string;
    url: string;
    size: number;
    content_type: string;
};

export type ErrorSummaryResponse = {
    total_errors: number;
    error_rate: number;
    error_types: {
        [key: string]: (number);
    };
    agents_with_errors: Array<(string)>;
    recent_errors: Array<{
        [key: string]: unknown;
    }>;
};

export type EvaluationRequest = {
    /**
     * Name of the agent to evaluate
     */
    agent_name: string;
    /**
     * User query that was processed
     */
    query: string;
    /**
     * Agent response to evaluate
     */
    response: string;
    /**
     * Type of evaluation
     */
    evaluation_type?: string;
    /**
     * Specific criteria to evaluate
     */
    criteria?: (Array<(string)> | null);
};

export type EvaluationResponse = {
    evaluation_id: string;
    agent_name: string;
    evaluation_type: string;
    overall_score: number;
    criteria_scores: {
        [key: string]: (number);
    };
    feedback: string;
    timestamp: string;
    metadata: {
        [key: string]: unknown;
    };
};

export type HealthStatusResponse = {
    overall_health_score: number;
    status: string;
    active_agents: Array<(string)>;
    inactive_agents: Array<(string)>;
    high_error_agents: Array<(string)>;
    resource_issues: Array<(string)>;
    total_agents: number;
    timestamp: string;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type HumanFeedbackRequest = {
    /**
     * Name of the agent
     */
    agent_name: string;
    /**
     * User query
     */
    query: string;
    /**
     * Agent response
     */
    response: string;
    /**
     * Rating from 1-5
     */
    rating: number;
    /**
     * Optional feedback text
     */
    feedback_text?: (string | null);
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type ItinerariesPublic = {
    data: Array<ItineraryPublic>;
    count: number;
};

export type ItineraryCreate = {
    title: string;
    description?: (string | null);
    date: string;
    start_time?: (string | null);
    end_time?: (string | null);
    location: string;
    latitude?: (number | null);
    longitude?: (number | null);
    estimated_cost?: (number | null);
    notes?: (string | null);
    image_urls?: (string | null);
    trip_id: string;
};

export type ItineraryPublic = {
    title: string;
    description?: (string | null);
    date: string;
    start_time?: (string | null);
    end_time?: (string | null);
    location: string;
    latitude?: (number | null);
    longitude?: (number | null);
    estimated_cost?: (number | null);
    notes?: (string | null);
    image_urls?: (string | null);
    id: string;
    trip_id: string;
    created_at: string;
    updated_at: string;
    order_index: number;
};

export type ItineraryUpdate = {
    title?: (string | null);
    description?: (string | null);
    date?: null;
    start_time?: (string | null);
    end_time?: (string | null);
    location?: (string | null);
    latitude?: (number | null);
    longitude?: (number | null);
    estimated_cost?: (number | null);
    notes?: (string | null);
    image_urls?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PerformanceResponse = {
    agent_name: string;
    total_requests: number;
    successful_requests: number;
    failed_requests: number;
    average_response_time: number;
    success_rate: number;
    error_rate: number;
    last_activity: string;
    peak_requests_per_minute: number;
    average_requests_per_hour: number;
};

export type PerformanceSummaryResponse = {
    agent_name: string;
    period_days: number;
    total_evaluations: number;
    average_score: number;
    performance_trend: string;
    recent_evaluations: Array<{
        [key: string]: unknown;
    }>;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type QueryRequest = {
    query: string;
    session_id?: (string | null);
};

export type QueryResponse = {
    answer: string;
    context?: Array<(string)>;
};

export type ResourceUsageResponse = {
    cpu_percent: number;
    memory_percent: number;
    memory_used_mb: number;
    memory_available_mb: number;
    disk_usage_percent: number;
    timestamp: string;
};

export type SessionCreate = {
    session_data?: {
        [key: string]: unknown;
    };
};

export type SessionResponse = {
    session_id: string;
    user_id: string;
    session_data: {
        [key: string]: unknown;
    };
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type TripCollaboratorCreate = {
    permission?: string;
    trip_id: string;
    user_email: string;
};

export type TripCreate = {
    title: string;
    description?: (string | null);
    destination: string;
    start_date: string;
    end_date: string;
    budget?: (number | null);
    trip_type?: TripType;
    status?: TripStatus;
    is_public?: boolean;
    cover_image_url?: (string | null);
};

export type TripPlanningRequest = {
    destination: string;
    start_date: string;
    end_date: string;
    budget?: (number | null);
    trip_type?: string;
    interests?: Array<(string)>;
    travelers?: number;
    accommodation_preference?: (string | null);
    transportation_preference?: (string | null);
};

export type TripPlanningResponse = {
    status: string;
    trip_id?: (string | null);
    research: {
        [key: string]: unknown;
    };
    itinerary: {
        [key: string]: unknown;
    };
    bookings: {
        [key: string]: unknown;
    };
    trip_summary: {
        [key: string]: unknown;
    };
    message?: (string | null);
};

export type TripPublic = {
    title: string;
    description?: (string | null);
    destination: string;
    start_date: string;
    end_date: string;
    budget?: (number | null);
    trip_type?: TripType;
    status?: TripStatus;
    is_public?: boolean;
    cover_image_url?: (string | null);
    id: string;
    owner_id: string;
    created_at: string;
    updated_at: string;
};

export type TripsPublic = {
    data: Array<TripPublic>;
    count: number;
};

export type TripStatus = 'draft' | 'planning' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';

export type TripType = 'leisure' | 'business' | 'adventure' | 'cultural' | 'romantic' | 'family' | 'solo';

export type TripUpdate = {
    title?: (string | null);
    description?: (string | null);
    destination?: (string | null);
    start_date?: (string | null);
    end_date?: (string | null);
    budget?: (number | null);
    trip_type?: (TripType | null);
    status?: (TripStatus | null);
    is_public?: (boolean | null);
    cover_image_url?: (string | null);
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UsageAnalyticsResponse = {
    period_hours: number;
    total_agents: number;
    agent_usage: {
        [key: string]: unknown;
    };
    summary: {
        [key: string]: unknown;
    };
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AgenticTestAgenticResponse = (unknown);

export type AgenticRunAgenticQueryData = {
    requestBody: {
        [key: string]: unknown;
    };
    sessionId: string;
    userId: string;
};

export type AgenticRunAgenticQueryResponse = (unknown);

export type AgentsCreateSessionData = {
    requestBody: SessionCreate;
};

export type AgentsCreateSessionResponse = (SessionResponse);

export type AgentsGetSessionData = {
    sessionId: string;
};

export type AgentsGetSessionResponse = (SessionResponse);

export type AgentsPopulateIndexEndpointResponse = (unknown);

export type AgentsAgentQueryData = {
    requestBody: QueryRequest;
};

export type AgentsAgentQueryResponse = (QueryResponse);

export type AiTravelChatWithAiPublicData = {
    requestBody: ChatRequest;
};

export type AiTravelChatWithAiPublicResponse = (ChatResponse);

export type AiTravelPlanTripWithAiData = {
    requestBody: TripPlanningRequest;
};

export type AiTravelPlanTripWithAiResponse = (TripPlanningResponse);

export type AiTravelStreamAgentEventsData = {
    sessionId: string;
};

export type AiTravelStreamAgentEventsResponse = (unknown);

export type AiTravelChatWithAiData = {
    requestBody: ChatRequest;
};

export type AiTravelChatWithAiResponse = (ChatResponse);

export type AiTravelGetAiSuggestionsData = {
    tripId: string;
};

export type AiTravelGetAiSuggestionsResponse = (unknown);

export type AiTravelOptimizeItineraryWithAiData = {
    tripId: string;
};

export type AiTravelOptimizeItineraryWithAiResponse = (unknown);

export type AiTravelSearchDestinationData = {
    destination: string;
};

export type AiTravelSearchDestinationResponse = (unknown);

export type AiTravelSearchTravelOptionsData = {
    departureDate: string;
    destination: string;
    origin: string;
    returnDate?: (string | null);
    travelers?: number;
};

export type AiTravelSearchTravelOptionsResponse = (unknown);

export type AiTravelGetTripRecommendationsData = {
    budget?: (number | null);
    destination: string;
    requestBody?: (Array<(string)> | null);
    tripType?: string;
};

export type AiTravelGetTripRecommendationsResponse = (unknown);

export type AiTravelGetDestinationWeatherData = {
    destination: string;
};

export type AiTravelGetDestinationWeatherResponse = (unknown);

export type AiTravelSearchPlacesData = {
    destination: string;
    placeType?: (string | null);
};

export type AiTravelSearchPlacesResponse = (unknown);

export type AiTravelSearchFlightsData = {
    adults?: number;
    children?: number;
    departureDate: string;
    destination: string;
    infants?: number;
    origin: string;
    returnDate?: (string | null);
};

export type AiTravelSearchFlightsResponse = (unknown);

export type AiTravelSearchHotelsData = {
    adults?: number;
    checkIn: string;
    checkOut: string;
    cityCode: string;
    rooms?: number;
};

export type AiTravelSearchHotelsResponse = (unknown);

export type ConversationsReadConversationsData = {
    limit?: number;
    skip?: number;
};

export type ConversationsReadConversationsResponse = (ConversationsPublic);

export type ConversationsCreateConversationData = {
    requestBody: ConversationCreate;
};

export type ConversationsCreateConversationResponse = (ConversationPublic);

export type ConversationsReadConversationData = {
    conversationId: string;
};

export type ConversationsReadConversationResponse = (ConversationPublic);

export type ConversationsUpdateConversationData = {
    conversationId: string;
    requestBody: ConversationUpdate;
};

export type ConversationsUpdateConversationResponse = (ConversationPublic);

export type ConversationsDeleteConversationData = {
    conversationId: string;
};

export type ConversationsDeleteConversationResponse = (unknown);

export type ConversationsReadConversationMessagesData = {
    conversationId: string;
    limit?: number;
    skip?: number;
};

export type ConversationsReadConversationMessagesResponse = (ConversationMessagesPublic);

export type ConversationsCreateConversationMessageData = {
    conversationId: string;
    requestBody: ConversationMessageCreate;
};

export type ConversationsCreateConversationMessageResponse = (ConversationMessagePublic);

export type DocumentsUploadDocumentData = {
    bookingId?: (string | null);
    documentType?: string;
    formData: Body_documents_upload_document;
    tripId?: (string | null);
};

export type DocumentsUploadDocumentResponse = (DocumentUploadResponse);

export type DocumentsGetDocumentData = {
    documentId: string;
};

export type DocumentsGetDocumentResponse = (unknown);

export type DocumentsDeleteDocumentData = {
    documentId: string;
};

export type DocumentsDeleteDocumentResponse = (unknown);

export type DocumentsDownloadDocumentData = {
    documentId: string;
};

export type DocumentsDownloadDocumentResponse = (unknown);

export type DocumentsGetTripDocumentsData = {
    /**
     * Filter by document type
     */
    documentType?: (string | null);
    tripId: string;
};

export type DocumentsGetTripDocumentsResponse = (unknown);

export type DocumentsGetBookingDocumentsData = {
    bookingId: string;
    /**
     * Filter by document type
     */
    documentType?: (string | null);
};

export type DocumentsGetBookingDocumentsResponse = (unknown);

export type DocumentsUploadBookingDocumentData = {
    bookingId: string;
    documentType?: string;
    formData: Body_documents_upload_booking_document;
};

export type DocumentsUploadBookingDocumentResponse = (DocumentUploadResponse);

export type DocumentsUploadTripDocumentData = {
    documentType?: string;
    formData: Body_documents_upload_trip_document;
    tripId: string;
};

export type DocumentsUploadTripDocumentResponse = (DocumentUploadResponse);

export type EvaluationEvaluateAgentData = {
    requestBody: EvaluationRequest;
};

export type EvaluationEvaluateAgentResponse = (EvaluationResponse);

export type EvaluationSubmitFeedbackData = {
    requestBody: HumanFeedbackRequest;
};

export type EvaluationSubmitFeedbackResponse = ({
    [key: string]: (string);
});

export type EvaluationGetFeedbackHistoryData = {
    agentName?: (string | null);
    limit?: number;
};

export type EvaluationGetFeedbackHistoryResponse = (Array<{
    [key: string]: unknown;
}>);

export type EvaluationGetAgentPerformanceMetricsData = {
    agentName: string;
    days?: number;
};

export type EvaluationGetAgentPerformanceMetricsResponse = (PerformanceSummaryResponse);

export type EvaluationGetAllAgentsPerformanceData = {
    days?: number;
};

export type EvaluationGetAllAgentsPerformanceResponse = (Array<PerformanceSummaryResponse>);

export type EvaluationStartAbTestData = {
    requestBody: ABTestRequest;
};

export type EvaluationStartAbTestResponse = ({
    [key: string]: unknown;
});

export type EvaluationGetAbTestResultsData = {
    testId: string;
};

export type EvaluationGetAbTestResultsResponse = ({
    [key: string]: unknown;
});

export type EvaluationGetEvaluationHistoryData = {
    agentName?: (string | null);
    limit?: number;
};

export type EvaluationGetEvaluationHistoryResponse = (Array<EvaluationResponse>);

export type EvaluationGetEvaluationMetricsResponse = ({
    [key: string]: unknown;
});

export type HealthBasicHealthCheckResponse = ({
    [key: string]: unknown;
});

export type HealthDetailedHealthCheckResponse = ({
    [key: string]: unknown;
});

export type HealthReadinessCheckResponse = ({
    [key: string]: unknown;
});

export type HealthLivenessCheckResponse = ({
    [key: string]: unknown;
});

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type MonitoringGetAllAgentsPerformanceResponse = (Array<PerformanceResponse>);

export type MonitoringGetAgentPerformanceData = {
    agentName: string;
};

export type MonitoringGetAgentPerformanceResponse = (PerformanceResponse);

export type MonitoringGetErrorSummaryData = {
    /**
     * Hours to look back for errors
     */
    hours?: number;
};

export type MonitoringGetErrorSummaryResponse = (ErrorSummaryResponse);

export type MonitoringGetResourceUsageResponse = (ResourceUsageResponse);

export type MonitoringGetCostSummaryResponse = (CostSummaryResponse);

export type MonitoringGetUsageAnalyticsData = {
    /**
     * Hours to look back for analytics
     */
    hours?: number;
};

export type MonitoringGetUsageAnalyticsResponse = (UsageAnalyticsResponse);

export type MonitoringGetHealthStatusResponse = (HealthStatusResponse);

export type MonitoringGetAllMetricsResponse = ({
    [key: string]: unknown;
});

export type MonitoringTrackRequestData = {
    agentName: string;
    responseTime: number;
    success?: boolean;
};

export type MonitoringTrackRequestResponse = ({
    [key: string]: (string);
});

export type MonitoringTrackErrorData = {
    agentName: string;
    errorMessage: string;
    errorType: string;
    requestId?: string;
    stackTrace?: string;
};

export type MonitoringTrackErrorResponse = ({
    [key: string]: (string);
});

export type MonitoringTrackCostData = {
    agentName: string;
    cost: number;
    operation?: string;
};

export type MonitoringTrackCostResponse = ({
    [key: string]: (string);
});

export type MonitoringGetAlertsResponse = (Array<{
    [key: string]: unknown;
}>);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type SimpleAgenticTestSimpleAgenticResponse = (unknown);

export type SimpleAgenticRunSimpleAgenticQueryData = {
    requestBody: {
        [key: string]: unknown;
    };
    sessionId: string;
    userId: string;
};

export type SimpleAgenticRunSimpleAgenticQueryResponse = (unknown);

export type TravelReadTripsData = {
    limit?: number;
    skip?: number;
    status?: (string | null);
    tripType?: (string | null);
};

export type TravelReadTripsResponse = (TripsPublic);

export type TravelCreateTripData = {
    requestBody: TripCreate;
};

export type TravelCreateTripResponse = (TripPublic);

export type TravelReadTripData = {
    tripId: string;
};

export type TravelReadTripResponse = (TripPublic);

export type TravelUpdateTripData = {
    requestBody: TripUpdate;
    tripId: string;
};

export type TravelUpdateTripResponse = (TripPublic);

export type TravelDeleteTripData = {
    tripId: string;
};

export type TravelDeleteTripResponse = (Message);

export type TravelReadItinerariesData = {
    limit?: number;
    skip?: number;
    tripId: string;
};

export type TravelReadItinerariesResponse = (ItinerariesPublic);

export type TravelCreateItineraryData = {
    requestBody: ItineraryCreate;
    tripId: string;
};

export type TravelCreateItineraryResponse = (ItineraryPublic);

export type TravelUpdateItineraryData = {
    itineraryId: string;
    requestBody: ItineraryUpdate;
};

export type TravelUpdateItineraryResponse = (ItineraryPublic);

export type TravelDeleteItineraryData = {
    itineraryId: string;
};

export type TravelDeleteItineraryResponse = (Message);

export type TravelReadBookingsData = {
    limit?: number;
    skip?: number;
    tripId: string;
};

export type TravelReadBookingsResponse = (BookingsPublic);

export type TravelCreateBookingData = {
    requestBody: BookingCreate;
    tripId: string;
};

export type TravelCreateBookingResponse = (BookingPublic);

export type TravelUpdateBookingData = {
    bookingId: string;
    requestBody: BookingUpdate;
};

export type TravelUpdateBookingResponse = (BookingPublic);

export type TravelDeleteBookingData = {
    bookingId: string;
};

export type TravelDeleteBookingResponse = (Message);

export type TravelReadCollaboratorsData = {
    tripId: string;
};

export type TravelReadCollaboratorsResponse = (unknown);

export type TravelAddCollaboratorData = {
    requestBody: TripCollaboratorCreate;
    tripId: string;
};

export type TravelAddCollaboratorResponse = (unknown);

export type TravelRemoveCollaboratorData = {
    collaboratorId: string;
    tripId: string;
};

export type TravelRemoveCollaboratorResponse = (Message);

export type TravelReadConversationsData = {
    limit?: number;
    skip?: number;
};

export type TravelReadConversationsResponse = (unknown);

export type TravelCreateConversationData = {
    requestBody: ConversationCreate;
};

export type TravelCreateConversationResponse = (ConversationPublic);

export type TravelReadMessagesData = {
    conversationId: string;
    limit?: number;
    skip?: number;
};

export type TravelReadMessagesResponse = (unknown);

export type TravelCreateMessageData = {
    conversationId: string;
    requestBody: ConversationMessageCreate;
};

export type TravelCreateMessageResponse = (ConversationMessagePublic);

export type TravelDeleteConversationData = {
    conversationId: string;
};

export type TravelDeleteConversationResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);